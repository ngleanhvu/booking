version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  kafka-connect:
#    image: debezium/connect:2.4
#    container_name: kafka-connect
#    depends_on:
#      - kafka
#      - booking-db
#    ports:
#      - "8083:8083"
#    environment:
#      BOOTSTRAP_SERVERS: kafka:29092
#      GROUP_ID: 1
#      CONFIG_STORAGE_TOPIC: connect-configs
#      OFFSET_STORAGE_TOPIC: connect-offsets
#      STATUS_STORAGE_TOPIC: connect-status
#      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
#      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 60s

  booking-db:
    image: mysql:8.0
    container_name: booking-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    command:
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-row-image=FULL
      --gtid-mode=ON
      --enforce-gtid-consistency=TRUE
      --default-authentication-plugin=mysql_native_password
    volumes:
      - booking_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
#    container_name: elasticsearch
#    ports:
#      - "9200:9200"
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - xpack.security.enrollment.enabled=false
#      - bootstrap.memory_lock=true
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      mem_limit: 1
#    volumes:
#      - es_data:/usr/share/elasticsearch/data
#    healthcheck:
#      test: curl -fsSL http://localhost:9200/_cluster/health?wait_for_status=yellow || exit 1
#      interval: 30s
#      timeout: 10s
#      retries: 10
#      start_period: 60s  # üëà TƒÉng th·ªùi gian kh·ªüi ƒë·ªông v√¨ Elasticsearch c·∫ßn th·ªùi gian ƒë·ªÉ l√™n

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redis_data:/data
    restart: always

#  discovery-server:
#    image: anhvubadai/discovery-server:s1.0
#    container_name: discovery-server
#    ports:
#      - "8009:8009"
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8009/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5

#  location-service:
#    image: anhvubadai/location-service:s1.0
#    container_name: location-service
#    ports:
#      - "8011:8011"
#      - "9011:9011"
#    environment:
#      SPRING_DATASOURCE_USERNAME: ${LOCATION_DB_USERNAME}
#      SPRING_DATASOURCE_PASSWORD: ${LOCATION_DB_PASSWORD}
#      SPRING_DATA_REDIS_HOST: ${LOCATION_REDIS_HOST}
#      SPRING_DATA_REDIS_PORT: ${LOCATION_REDIS_PORT}
#      SPRING_DATASOURCE_URL: jdbc:mysql://booking-db:${LOCATION_DB_PORT}/${LOCATION_DB_DATABASE}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8009/eureka
#    depends_on:
#      redis:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#      booking-db:
#        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8011/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#
#  property-service:
#    image: anhvubadai/property-service:s1.0
#    container_name: property-service
#    ports:
#      - "8002:8002"     # REST
#      - "9002:9002"     # gRPC
#    depends_on:
#     booking-db:
#       condition: service_healthy
#     discovery-server:
#       condition: service_healthy
#    environment:
#      SPRING_DATASOURCE_USERNAME: ${PROPERTY_DB_USERNAME}
#      SPRING_DATASOURCE_PASSWORD: ${PROPERTY_DB_PASSWORD}
#      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#      SPRING_DATASOURCE_URL: jdbc:mysql://booking-db:${PROPERTY_DB_PORT}/${PROPERTY_DB_DATABASE}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#      AWS_REGION: ${AWS_REGION}
#      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8009/eureka
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8002/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5

#  search-service:
#    image: anhvubadai/search-service:s1.0
#    container_name: search-service
#    ports:
#      - "8014:8014"
#    depends_on:
#      kafka:
#        condition: service_healthy
#      kafka-connect:
#        condition: service_healthy
#      elasticsearch:
#        condition: service_healthy
#      discovery-server:
#        condition: service_healthy
#    environment:
#      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:29092
#      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8009/eureka

  nginx:
    build:
      context: ../nginx
    container_name: nginx
    ports:
      - "80:80"

#  auth-service:
#    image: anhvubadai/auth-service:s1.0
#    container_name: auth-service
#    ports:
#      - "8015:8015"
#    environment:
#      SPRING_DATASOURCE_USERNAME: ${AUTH_DB_USERNAME}
#      SPRING_DATASOURCE_PASSWORD: ${AUTH_DB_PASSWORD}
#      SPRING_DATASOURCE_URL: jdbc:mysql://booking-db:${AUTH_DB_PORT}/${AUTH_DB_DATABASE}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8009/eureka
#    depends_on:
#      discovery-server:
#        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8015/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5


volumes:
  booking_data:
  redis_data:
  es_data:
